services:
  # Gradio Web界面服务
  mineru:
    build:
      context: ../docker/china
      dockerfile: Dockerfile
    image: mineru-sglang:latest
    container_name: mineru
    restart: always
    ports:
      - "7860:7860"
    env_file:
      - ./mineru.env
    environment:
      PYTORCH_CUDA_ALLOC_CONF: max_split_size_mb:128
      CUDA_LAUNCH_BLOCKING: 1
      NVIDIA_VISIBLE_DEVICES: "0"
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
    command: >
      python /workspace/mineru/cli/gradio_app_with_auth.py
      --server-name 0.0.0.0
      --server-port 7860
      --enable-sglang-engine False
      --auth
    ulimits:
      memlock: -1
      stack: 67108864
    ipc: host
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ../mineru:/workspace/mineru:ro
  
  mineru-sglang:
    image: mineru-sglang:latest
    container_name: mineru-sglang-server
    restart: always
    profiles: ["sglang-server"]
    ports:
      - "30000:30000"
    environment:
      MINERU_MODEL_SOURCE: local
      MINERU_VIRTUAL_VRAM_SIZE: 8
      MINERU_DEVICE_MODE: cuda
      PYTORCH_CUDA_ALLOC_CONF: max_split_size_mb:128
      CUDA_LAUNCH_BLOCKING: 1
    entrypoint: mineru-sglang-server
    command:
      - --host
      - 0.0.0.0
      - --port
      - "30000"
      - --mem-fraction-static
      - "0.4"
    ulimits:
      memlock: -1
      stack: 67108864
    ipc: host
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:30000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
        limits:
          memory: 10G
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs

networks:
  default:
    name: mineru-network
    driver: bridge

volumes:
  models:
    driver: local
  logs:
    driver: local
  uploads:
    driver: local
  output:
    driver: local